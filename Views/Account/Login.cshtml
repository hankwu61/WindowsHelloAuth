@model WindowsHelloAuth.Models.LoginViewModel

@{
    ViewData["Title"] = "Log in";
}

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h4>Password Login</h4>
            </div>
            <div class="card-body">
                <form asp-controller="Account" asp-action="Login" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group mb-3">
                        <label asp-for="Email" class="form-label"></label>
                        <input asp-for="Email" class="form-control" autocomplete="username" />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Password" class="form-label"></label>
                        <input asp-for="Password" class="form-control" autocomplete="current-password" />
                        <span asp-validation-for="Password" class="text-danger"></span>
                    </div>
                    <div class="form-group mb-3">
                        <div class="form-check">
                            <input asp-for="RememberMe" class="form-check-input" />
                            <label asp-for="RememberMe" class="form-check-label"></label>
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Log in</button>
                    </div>
                </form>
                <div class="mt-3">
                    <a asp-controller="Account" asp-action="Register">Register as a new user</a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4>Windows Hello Login</h4>
            </div>
            <div class="card-body">
                <p>Use Windows Hello to log in quickly and securely.</p>
                <div class="form-group mb-3">
                    <label for="emailForWindowsHello" class="form-label">Email</label>
                    <input type="email" id="emailForWindowsHello" class="form-control" />
                </div>
                <div class="form-group">
                    <button id="windowsHelloLogin" class="btn btn-success">
                        <i class="bi bi-fingerprint"></i> Sign in with Windows Hello
                    </button>
                </div>
                <div id="windowsHelloMessage" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Check if WebAuthn is supported
            if (!window.PublicKeyCredential) {
                document.getElementById('windowsHelloLogin').disabled = true;
                document.getElementById('windowsHelloMessage').innerHTML = 
                    '<div class="alert alert-warning">Your browser does not support Windows Hello login.</div>';
                return;
            }

            // Check if Windows Hello is available on this device
            PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
                .then(function (available) {
                    if (!available) {
                        document.getElementById('windowsHelloLogin').disabled = true;
                        document.getElementById('windowsHelloMessage').innerHTML = 
                            '<div class="alert alert-warning">Windows Hello is not available on this device.</div>';
                    }
                });

            // Windows Hello login button click handler
            document.getElementById('windowsHelloLogin').addEventListener('click', async function (e) {
                e.preventDefault();

                const email = document.getElementById('emailForWindowsHello').value;
                if (!email) {
                    document.getElementById('windowsHelloMessage').innerHTML = 
                        '<div class="alert alert-danger">Please enter your email.</div>';
                    return;
                }

                try {
                    // 1. Get assertion options from the server
                    const optionsResponse = await fetch('/api/fido2/assertionOptions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            email: email
                        })
                    });

                    if (!optionsResponse.ok) {
                        const error = await optionsResponse.json();
                        throw new Error(error.message || 'Failed to get assertion options');
                    }

                    const options = await optionsResponse.json();
                    
                    // 2. Convert base64 strings to ArrayBuffer
                    options.challenge = base64UrlDecode(options.challenge);
                    options.allowCredentials = options.allowCredentials.map(credential => {
                        return {
                            ...credential,
                            id: base64UrlDecode(credential.id)
                        };
                    });

                    // 3. Request assertion from authenticator (Windows Hello)
                    const assertion = await navigator.credentials.get({
                        publicKey: options
                    });

                    // 4. Prepare the assertion response for the server
                    const authResponse = {
                        id: assertion.id,
                        rawId: arrayBufferToBase64Url(assertion.rawId),
                        response: {
                            authenticatorData: arrayBufferToBase64Url(assertion.response.authenticatorData),
                            clientDataJSON: arrayBufferToBase64Url(assertion.response.clientDataJSON),
                            signature: arrayBufferToBase64Url(assertion.response.signature),
                            userHandle: assertion.response.userHandle ? arrayBufferToBase64Url(assertion.response.userHandle) : null
                        },
                        type: assertion.type
                    };

                    // 5. Send the assertion to the server
                    const verifyResponse = await fetch('/api/fido2/makeAssertion', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(authResponse)
                    });

                    if (!verifyResponse.ok) {
                        const error = await verifyResponse.json();
                        throw new Error(error.message || 'Failed to verify authentication');
                    }

                    // 6. If successful, redirect to the home page
                    window.location.href = '/';

                } catch (error) {
                    document.getElementById('windowsHelloMessage').innerHTML = 
                        `<div class="alert alert-danger">${error.message || 'Windows Hello authentication failed'}</div>`;
                    console.error(error);
                }
            });

            // Helper functions for base64url encoding/decoding
            function base64UrlDecode(base64Url) {
                const padding = '='.repeat((4 - (base64Url.length % 4)) % 4);
                const base64 = (base64Url + padding)
                    .replace(/-/g, '+')
                    .replace(/_/g, '/');
                const rawData = window.atob(base64);
                const buffer = new Uint8Array(rawData.length);
                
                for (let i = 0; i < rawData.length; i++) {
                    buffer[i] = rawData.charCodeAt(i);
                }
                
                return buffer.buffer;
            }

            function arrayBufferToBase64Url(arrayBuffer) {
                const bytes = new Uint8Array(arrayBuffer);
                let base64 = '';
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                
                const byteLength = bytes.byteLength;
                const byteRemainder = byteLength % 3;
                const mainLength = byteLength - byteRemainder;
                
                let a, b, c, d;
                let chunk;
                
                // Main loop deals with bytes in chunks of 3
                for (let i = 0; i < mainLength; i = i + 3) {
                    // Combine the three bytes into a single integer
                    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
                    
                    // Use bitmasks to extract 6-bit segments from the triplet
                    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
                    b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12
                    c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6
                    d = chunk & 63; // 63 = 2^6 - 1
                    
                    // Convert the raw binary segments to the appropriate ASCII encoding
                    base64 += chars[a] + chars[b] + chars[c] + chars[d];
                }
                
                // Deal with the remaining bytes and padding
                if (byteRemainder == 1) {
                    chunk = bytes[mainLength];
                    
                    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
                    
                    // Set the 4 least significant bits to zero
                    b = (chunk & 3) << 4; // 3 = 2^2 - 1
                    
                    base64 += chars[a] + chars[b] + '==';
                } else if (byteRemainder == 2) {
                    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
                    
                    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
                    b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4
                    
                    // Set the 2 least significant bits to zero
                    c = (chunk & 15) << 2; // 15 = 2^4 - 1
                    
                    base64 += chars[a] + chars[b] + chars[c] + '=';
                }
                
                return base64
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
            }
        });
    </script>
} 