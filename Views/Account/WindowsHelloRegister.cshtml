@model WindowsHelloAuth.Models.WindowsHelloRegistrationViewModel

@{
    ViewData["Title"] = "Register Windows Hello";
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h2>@ViewData["Title"]</h2>
                <p class="text-muted">Set up Windows Hello for quick and secure sign-in</p>
            </div>
            <div class="card-body">
                <div class="alert alert-info" id="supportMessage">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div>Checking if your device supports Windows Hello...</div>
                    </div>
                </div>
                
                <form id="windowsHelloForm">
                    <input type="hidden" id="userId" value="@Model.UserId" />
                    
                    <div class="form-group mb-3">
                        <label asp-for="DeviceName" class="form-label">Device Name</label>
                        <input asp-for="DeviceName" class="form-control" placeholder="My Windows PC" />
                        <div class="form-text">Give this device a name so you can identify it later.</div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <button type="button" id="registerButton" class="btn btn-primary" disabled>
                            <i class="bi bi-fingerprint"></i> Set up Windows Hello
                        </button>
                    </div>
                </form>
                
                <div id="statusMessage" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const supportMessage = document.getElementById('supportMessage');
            const registerButton = document.getElementById('registerButton');
            const statusMessage = document.getElementById('statusMessage');
            const deviceNameInput = document.getElementById('DeviceName');
            const userIdInput = document.getElementById('userId');
            
            // Check if WebAuthn is supported in this browser
            if (!window.PublicKeyCredential) {
                supportMessage.className = 'alert alert-danger';
                supportMessage.innerHTML = 'Your browser does not support Windows Hello authentication.';
                return;
            }
            
            // Check if platform authenticator (Windows Hello) is available
            try {
                const available = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
                if (!available) {
                    supportMessage.className = 'alert alert-danger';
                    supportMessage.innerHTML = 'Windows Hello is not available on this device.';
                    return;
                }
                
                // Windows Hello is supported and available
                supportMessage.className = 'alert alert-success';
                supportMessage.innerHTML = '<i class="bi bi-check-circle"></i> Windows Hello is supported on this device.';
                registerButton.disabled = false;
            } catch (error) {
                supportMessage.className = 'alert alert-danger';
                supportMessage.innerHTML = `Error checking Windows Hello support: ${error.message}`;
                console.error(error);
                return;
            }
            
            // Handle registration button click
            registerButton.addEventListener('click', async function() {
                if (!deviceNameInput.value) {
                    statusMessage.innerHTML = '<div class="alert alert-danger">Please provide a device name.</div>';
                    return;
                }
                
                statusMessage.innerHTML = '<div class="alert alert-info">Processing... Please wait for Windows Hello prompt.</div>';
                
                try {
                    // 1. Get credential creation options from server
                    const optionsResponse = await fetch('/api/fido2/makeCredentialOptions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            userId: userIdInput.value,
                            deviceName: deviceNameInput.value
                        })
                    });
                    
                    if (!optionsResponse.ok) {
                        const error = await optionsResponse.json();
                        throw new Error(error.message || 'Failed to get credential options');
                    }
                    
                    const options = await optionsResponse.json();
                    
                    // 2. Convert base64 strings to ArrayBuffer
                    options.challenge = base64UrlDecode(options.challenge);
                    options.user.id = base64UrlDecode(options.user.id);
                    
                    if (options.excludeCredentials) {
                        options.excludeCredentials = options.excludeCredentials.map(credential => {
                            return {
                                ...credential,
                                id: base64UrlDecode(credential.id)
                            };
                        });
                    }
                    
                    // 3. Create credentials with Windows Hello
                    const credential = await navigator.credentials.create({
                        publicKey: options
                    });
                    
                    // 4. Prepare the credential response for the server
                    const credentialResponse = {
                        id: credential.id,
                        rawId: arrayBufferToBase64Url(credential.rawId),
                        response: {
                            attestationObject: arrayBufferToBase64Url(credential.response.attestationObject),
                            clientDataJSON: arrayBufferToBase64Url(credential.response.clientDataJSON)
                        },
                        type: credential.type,
                        credentialName: deviceNameInput.value
                    };
                    
                    // 5. Send the credential to the server
                    const registerResponse = await fetch('/api/fido2/makeCredential', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(credentialResponse)
                    });
                    
                    if (!registerResponse.ok) {
                        const error = await registerResponse.json();
                        throw new Error(error.message || 'Failed to register Windows Hello');
                    }
                    
                    // 6. Show success message
                    statusMessage.innerHTML = '<div class="alert alert-success"><i class="bi bi-check-circle"></i> Windows Hello has been successfully registered for this account! You can now use it to sign in.</div>';
                    deviceNameInput.value = '';
                    registerButton.disabled = true;
                    
                    // 7. Redirect after delay
                    setTimeout(() => {
                        window.location.href = '/';
                    }, 3000);
                    
                } catch (error) {
                    statusMessage.innerHTML = `<div class="alert alert-danger">${error.message || 'Failed to register Windows Hello'}</div>`;
                    console.error(error);
                }
            });
            
            // Helper functions for base64url encoding/decoding
            function base64UrlDecode(base64Url) {
                const padding = '='.repeat((4 - (base64Url.length % 4)) % 4);
                const base64 = (base64Url + padding)
                    .replace(/-/g, '+')
                    .replace(/_/g, '/');
                const rawData = window.atob(base64);
                const buffer = new Uint8Array(rawData.length);
                
                for (let i = 0; i < rawData.length; i++) {
                    buffer[i] = rawData.charCodeAt(i);
                }
                
                return buffer.buffer;
            }
            
            function arrayBufferToBase64Url(arrayBuffer) {
                const bytes = new Uint8Array(arrayBuffer);
                let base64 = '';
                const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                
                const byteLength = bytes.byteLength;
                const byteRemainder = byteLength % 3;
                const mainLength = byteLength - byteRemainder;
                
                let a, b, c, d;
                let chunk;
                
                // Main loop deals with bytes in chunks of 3
                for (let i = 0; i < mainLength; i = i + 3) {
                    // Combine the three bytes into a single integer
                    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
                    
                    // Use bitmasks to extract 6-bit segments from the triplet
                    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
                    b = (chunk & 258048) >> 12; // 258048 = (2^6 - 1) << 12
                    c = (chunk & 4032) >> 6; // 4032 = (2^6 - 1) << 6
                    d = chunk & 63; // 63 = 2^6 - 1
                    
                    // Convert the raw binary segments to the appropriate ASCII encoding
                    base64 += chars[a] + chars[b] + chars[c] + chars[d];
                }
                
                // Deal with the remaining bytes and padding
                if (byteRemainder == 1) {
                    chunk = bytes[mainLength];
                    
                    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2
                    
                    // Set the 4 least significant bits to zero
                    b = (chunk & 3) << 4; // 3 = 2^2 - 1
                    
                    base64 += chars[a] + chars[b] + '==';
                } else if (byteRemainder == 2) {
                    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
                    
                    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
                    b = (chunk & 1008) >> 4; // 1008 = (2^6 - 1) << 4
                    
                    // Set the 2 least significant bits to zero
                    c = (chunk & 15) << 2; // 15 = 2^4 - 1
                    
                    base64 += chars[a] + chars[b] + chars[c] + '=';
                }
                
                return base64
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                    .replace(/=/g, '');
            }
        });
    </script>
} 